on:
  push:
    branches:
      - master
    paths:
      - 'gcp/**'

jobs:
  update_infra:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Cloud SDK
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure gcloud
        uses: google-github-actions/setup-gcloud@v1

      - name: Set up Terraform
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt-get update && sudo apt-get install terraform
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}

      - name: move to gcp directory
        run: |
          cd gcp
          ls

      - name: Terraform Init
        run: |
          cd gcp
          terraform init
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}

      - name: Terraform Plan
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_PASS: ${{ secrets.DB_PASS }}
          DB_USER: ${{ secrets.DB_USER }}
          INSTANCE_CONNECTION_NAME: ${{ secrets.INSTANCE_CONNECTION_NAME }}
          REDISHOST: ${{ secrets.REDISHOST }}

        run: |
          cd gcp
          terraform plan -var "DB_NAME=${DB_NAME}" -var "DB_PASS=${DB_PASS}" -var "DB_USER=${DB_USER}" -var "INSTANCE_CONNECTION_NAME=${INSTANCE_CONNECTION_NAME}" -var "REDISHOST=${REDISHOST}"

      - name: Terraform Apply
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_PASS: ${{ secrets.DB_PASS }}
          DB_USER: ${{ secrets.DB_USER }}
          INSTANCE_CONNECTION_NAME: ${{ secrets.INSTANCE_CONNECTION_NAME }}
          REDISHOST: ${{ secrets.REDISHOST }}

        run: |
          cd gcp
          terraform apply -auto-approve -var "DB_NAME=${DB_NAME}" -var "DB_PASS=${DB_PASS}" -var "DB_USER=${DB_USER}" -var "INSTANCE_CONNECTION_NAME=${INSTANCE_CONNECTION_NAME}" -var "REDISHOST=${REDISHOST}"

      - name: Validate Infrastructure
        run: |
          # Verificar el estado de Cloud Functions
          gcloud functions list

          # Verificar el estado de API Gateway
          gcloud api-gateway gateways list

          # Verificar el estado de Cloud Storage
          gcloud storage buckets list

          gcloud redis instances describe my-redis-instance --region=us-central1

          gcloud sql instances describe my-db-instance --format="value(state)"

          # Verificar el resultado de la validaci√≥n
          if [ $? -eq 0 ]; then
            echo "Infrastructure validation passed. Infrastructure is updated successfully."
          else
            echo "Infrastructure validation failed. There might be issues with the updated infrastructure."
            exit 1
          fi
